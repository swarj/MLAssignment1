# -*- coding: utf-8 -*-
"""Assignment_setup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s6eZDtvdDmBreauwrtMd80TXrDY7znJg
"""

import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split

import io

import requests

url = "https://raw.githubusercontent.com/swarj/MLAssignment1/main/Concrete_Data.xlsx%20-%20Sheet1.csv"

df = pd.read_csv(url)
x = df.iloc[0:,0:8]
x['8'] = 1
x = np.array(x)
y = np.array(df.iloc[0:,8:])
x_test = df.iloc[0:, 0:8]
x_test['8'] = 1
x_test = np.array(x_test)
y_test = np.array(df.iloc[0:,8:]) # Y Values
#x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 5);
# print(x_train.shape)
# print(x_test.shape)
# print(y_train.shape)
# print(y_test.shape)

def cost(df,params):
  total_cost = 0
  for i in range(1000):
    total_cost += (1/1000) * ((df[i]*params).sum() - y[i])**2
  return total_cost


def gd(df, params, lrate, iter_value):
  for i in range (iter_value): #more iterations, closer to mean value
    slopes = np.zeros(9) # a slope for each parameter
    for j in range(1000): # number of training data points
      for k in range(9): #pass through features
        # theta J = theta J - learning rate into MSE 
        # 1/M summation hypothesis - Y * jth feature in ith row (kind of like seeing the variance and than using that to calculate the loss)
        slopes[k] += (1/1000) * ((df[j] * params).sum() - y[j])*df[j][k] #avg of number of rows
    params = params - lrate * slopes
    print(cost(df,params))
  return params

def predict(X, params):
  y_predicted = np.dot(X, params)
  return y_predicted

params = np.zeros(9)
lrate = 0.000001
iter_value = 100
params = gd(x,params, lrate, iter_value)
print("PARAMETERS: ", params)
print(predict(x_test, params))
print(y_test)

#Y = df[['Concrete compressive strength(MPa, megapascals)']] #We want to be able to predict Y, the concrete strength

#X = df.drop(['Concrete compressive strength(MPa, megapascals)'], axis = 1) #X contains all the factors we want to predict Y

#from sklearn.model_selection import train_test_split #using SKlearn function to split into training and testing

#train, test = train_test_split(df, test_size = 0.8) #finished split, let's begin model construction

